class Solution:

    palindrome_set = set()

    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        result_str = ""
        for startIndex in range(0, len(s)):

            for innerIndex in range(startIndex + 1, len(s) + 1):
                current_str = s[startIndex:innerIndex]
                if current_str in self.palindrome_set or self.isPalindrome(current_str):
                    if len(current_str) > len(result_str):
                        result_str = current_str

        return result_str

    def isOddNumber(self, length):
        if length % 2 == 1:
            return True
        else:
            return False


    def isPalindrome(self, input):

        length = len(input)

        is_odd = self.isOddNumber(length)

        if is_odd:
            # odd process
            if length == 1:
                is_odd = self.isOddNumber(length)
                self.palindrome_set.add(input)
                return True
            else:
                head_char = input[0:1]
                tail_char = input[length - 1:length]
                if head_char != tail_char:
                    return False
                else:
                    self.palindrome_set.add(input)
                    return self.isPalindrome(input[1:length - 1])
        else:
            # even process
            if length == 2:
                head_char = input[0:1]
                tail_char = input[1:2]
                if head_char == tail_char:
                    self.palindrome_set.add(input)
                    return True
                else:
                    return False
            else:
                head_char = input[0:1]
                tail_char = input[length - 1:length]
                if head_char != tail_char:
                    return False
                else:
                    self.palindrome_set.add(input)
                    return self.isPalindrome(input[1:length - 1])

        return True